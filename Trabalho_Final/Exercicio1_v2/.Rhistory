'logoff', 'logon', 'logstart', 'logstate', 'logstop', 'ls', 'lsmagic',
'lx', 'macro', 'magic', 'man', 'matplotlib', 'mkdir', 'more',
'mv', 'notebook', 'page', 'pastebin', 'pdb', 'pdef', 'pdoc',
'pfile', 'pinfo', 'pinfo2', 'pip', 'popd', 'pprint', 'precision',
'prun', 'psearch', 'psource', 'pushd', 'pwd', 'pycat', 'pylab',
'qtconsole', 'quickref', 'recall', 'rehashx', 'reload_ext', 'rep',
'rerun', 'reset', 'reset_selective', 'rm', 'rmdir', 'run', 'save',
'sc', 'set_env', 'store', 'sx', 'system', 'tb', 'time', 'timeit',
'unalias', 'unload_ext', 'who', 'who_ls', 'whos', 'xdel', 'xmode'
)
r_line_magics <- paste0('^%?(', paste(line_magics, collapse = '|'), ')($|\\s)')
# convert raw text/html and text/latex cells to raw ```{=format}` Markdown blocks
cell_raw <- function(x, fmt) {
if (length(fmt) != 1) return()
fmt <- switch(fmt, 'text/html' = 'html', 'text/latex' = 'latex')
if (length(fmt) == 0) return()
c(sprintf('```{=%s}', fmt), x, '```')
}
# adjust some cell magic names to knitr's engine names
adjust_lang <- function(x) {
if (x == 'R') return('r')
if (x == 'javascript') return('js')
# use raw HTML/LaTeX blocks for Pandoc's Markdown
if (tolower(x) %in% c('html', 'latex')) return(paste0('=', tolower(x)))
x
}
# convert .ipynb metadata to YAML frontmatter in .Rmd
ipynb_yaml <- function(meta, input) {
# default title and output format
res <- list(
title = paste0('An R Markdown document converted from "', input, '"'),
output = 'html_document'
)
# currently only the `authors` field is supported
authors <- unlist(lapply(meta$authors, `[[`, 'name'))
if (length(authors) > 0) res[['author']] <- paste(authors, collapse = ', ')
gsub('\n+$', '', yaml::as.yaml(res))
}
input <- "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/ML_Trabalho8.ipynb"
output <- "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/ML_Trabalho8_conv.Rmd"
convert_ipynb(input, output = xfun::with_ext(input, "Rmd"))
isTRUE(getOption('knitr.in.progress'))
isTRUE(getOption('knitr.in.progress'))
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE,
)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE,
)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = FALSE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
library(FactoMineR)
library(factoextra)
library(dbscan)
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados)
dados.scale <- scale(subset(dados, select = c(2:11)))
View(dados.scale)
set.seed(123)
res <- dbscan(dados.scale, eps = 100, MinPts = 5)
fviz_cluster(res, dados.scale, geom = "point")
res <- dbscan(dados.scale, eps = 10, MinPts = 5)
res <- dbscan(dados.scale, eps = 1, MinPts = 5)
fviz_cluster(res, dados.scale, geom = "point")
res <- dbscan(dados.scale, eps = 1, MinPts = 4)
fviz_cluster(res, dados.scale, geom = "point")
print(res["cluster"])
dados_clust <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", header = TRUE, sep = ",")
dados_clust_test$dbscan<- res["cluster"]
write.csv(dados_clust_test,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
dados_clust_test <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", header = TRUE, sep = ",")
dados_clust_test$dbscan<- res["cluster"]
write.csv(dados_clust_test,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
dados_clust <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", header = TRUE, sep = ",")
dados_clust$dbscan<- res["cluster"]
write.csv(dados_clust,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
library(FactoMineR)
library(factoextra)
library(dbscan)
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados)
dados.scale <- scale(subset(dados, select = c(2:11)))
View(dados.scale)
set.seed(123)
res <- dbscan(dados.scale, eps = 1, MinPts = 4)
View(res)
res[["cluster"]]
fviz_cluster(res, dados.scale, geom = "point")
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
library(FactoMineR)
library(factoextra)
library(dbscan)
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados)
dados.scale <- scale(subset(dados, select = c(2:11)))
View(dados.scale)
set.seed(123)
res <- dbscan(dados.scale, eps = 1, MinPts = 4)
View(res)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
# install.packages("kohonen")
library("kohonen")
set.seed(593)
dados_tm <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados_tm)
sum(is.nan(as.matrix(dados_tm)))
sum(is.na(as.matrix(dados_tm)))
sum(is.infinite(as.matrix(dados_tm)))
ncol(dados_tm)
nrow(dados_tm)
#Media da coluna - valor do atributo dividido pelo desvio padrão da coluna
dados_tm.scale <- scale(subset(dados_tm, select = c(2:11)))
View(dados_tm.scale)
ncol(dados_tm.scale)
nrow(dados_tm.scale)
df.grid = somgrid(xdim = 25, ydim=25, topo="hexagonal")
df.som = som(dados_tm.scale, grid=df.grid, rlen=500, alpha=c(0.05,0.01))
plot(df.som, type="changes")
plot(df.som, type="count") #Apenas visualiza os neronios com mais dados proximos. Não é o mapa de calor ainda.
plot(df.som, type="codes") # Essa visualização é muito importante porque
# mostra as caracteristicas principais que exercem poder de separação (no caso do iris isso seia a sepal.width).
# Mostra tambem quais são as caracteristicas que menos variam e que, portanto, deveriam ser desprezadas.
plot(df.som, type="dist.neighbours")
groups = 25
df.hc = cutree(hclust(dist(df.som$codes[[1]][,1:10])), groups)
plot(df.som, type="dist.neighbours")
add.cluster.boundaries(df.som, df.hc)
plot(df.som, type="codes", bgcol=rainbow(groups)[df.hc])
View(df.som$codes[[1]])
clusterneuronio <-df.hc[df.som$unit.classif]
View(clusterneuronio)
# Chunk 1: setup
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
# Chunk 2
library(FactoMineR)
library(factoextra)
library(dbscan)
# Chunk 3
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados)
# Chunk 4
dados.scale <- scale(subset(dados, select = c(2:11)))
View(dados.scale)
# Chunk 5
set.seed(123)
# Chunk 6
res <- dbscan(dados.scale, eps = 1, MinPts = 4)
View(res)
# Chunk 7
fviz_cluster(res, dados.scale, geom = "point")
# Chunk 8
print(res["cluster"])
write.csv(dados_k2,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
dados2 <- dados
dados2$dbscan <- res["cluster"]
View(dados2)
dados2 <- dados
dados2$dbscan <- res$cluster
View(dados2)
write.csv(,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
write.csv(dados2,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# if (!require (c("ggplot2", "plotly", "stringi", "stargazer","reticulate", "FactoMineR", "factoextra"))) install.packages(c("ggplot2", "plotly", "stringi", "stargazer","reticulate"), dependencies = TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
library(FactoMineR)
library(factoextra)
dados_k <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados_k)
dados_k.scale <- scale(subset(dados_k, select = c(2:11)))
View(dados_k.scale)
kc <- kmeans(dados_k.scale, 10, nstart = 25)
View(kc)
kc[["size"]]
kc[["centers"]]
kc[["cluster"]]
kc[["withinss"]]
kc$iter
plot(x=dados_k.scale, col = kc$cluster, pch = 19, cex = .2)
points(kc$centers
, col=c("blue","purple","orange","red","green","yellow","gray","black","cyan", "magenta")
, pch = 8
, cex = 3
, lwd = 5)
fviz_cluster(kc, data = dados_k.scale)
k.max <- 100
wss <- sapply(1:k.max,
function(k){kmeans(dados_k.scale, k, nstart=25,iter.max = 50 )$tot.withinss})
plot(1:k.max, wss,
type="b", pch = 19, frame = FALSE,
xlab="Numero de clusters K",
ylab="Soma total da diferenca dos quadrados internos dos clusters")
kc2 <- kmeans(dados_k.scale, 22, nstart = 25)
View(kc2)
kc2[["size"]]
kc2[["centers"]]
kc2[["cluster"]]
kc2[["withinss"]]
kc2$iter
plot(x=dados_k.scale, col = kc2$cluster, pch = 19, cex = .1)
points(kc2$centers
, col=c("blue","purple","orange","red","green","yellow","gray")
, pch = 8
, cex = 3
, lwd = 5)
fviz_cluster(kc2, data = dados_k.scale)
dados_clust <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", header = TRUE, sep = ",")
dados_clust$kmeans <- kc2$cluster
View(dados_clust)
write.csv(dados_clust,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
# install.packages("kohonen")
library("kohonen")
set.seed(593)
dados_tm <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados_tm)
sum(is.nan(as.matrix(dados_tm)))
sum(is.na(as.matrix(dados_tm)))
sum(is.infinite(as.matrix(dados_tm)))
ncol(dados_tm)
nrow(dados_tm)
#Media da coluna - valor do atributo dividido pelo desvio padrão da coluna
dados_tm.scale <- scale(subset(dados_tm, select = c(2:11)))
View(dados_tm.scale)
ncol(dados_tm.scale)
nrow(dados_tm.scale)
df.grid = somgrid(xdim = 25, ydim=25, topo="hexagonal")
df.som = som(dados_tm.scale, grid=df.grid, rlen=500, alpha=c(0.05,0.01))
plot(df.som, type="changes")
plot(df.som, type="count") #Apenas visualiza os neronios com mais dados proximos. Não é o mapa de calor ainda.
plot(df.som, type="codes") # Essa visualização é muito importante porque
# mostra as caracteristicas principais que exercem poder de separação (no caso do iris isso seia a sepal.width).
# Mostra tambem quais são as caracteristicas que menos variam e que, portanto, deveriam ser desprezadas.
plot(df.som, type="dist.neighbours")
groups = 22
df.hc = cutree(hclust(dist(df.som$codes[[1]][,1:10])), groups)
plot(df.som, type="dist.neighbours")
add.cluster.boundaries(df.som, df.hc)
plot(df.som, type="codes", bgcol=rainbow(groups)[df.hc])
View(df.som$codes[[1]])
clusterneuronio <-df.hc[df.som$unit.classif]
View(clusterneuronio)
dados_clust <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", header = TRUE, sep = ",")
dados_clust$som <- clusterneuronio
View(dados_clust)
write.csv(dados_clust,"/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/dados_clust.csv", row.names=FALSE)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
res <- dbscan(dados.scale, eps = .4, MinPts = 4)
View(res)
knitr::opts_chunk$set(
# fig.width=12,
# fig.height=8,
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
# install.packages(c("ggplot2", "plotly", "stringi"),dep=TRUE )
library(plotly)
library(stargazer)
library(reticulate)
# reticulate::py_config()
use_python("/Users/andrerodrigues/opt/anaconda3/bin/python") # Digite "which python" no seu terminal para determinar o caminho do python no seu computador
library(FactoMineR)
library(factoextra)
library(dbscan)
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho8/data_nostd.csv", header = TRUE, sep = ",")
View(dados)
dados.scale <- scale(subset(dados, select = c(2:11)))
View(dados.scale)
set.seed(123)
res <- dbscan(dados.scale, eps = .4, MinPts = 4)
View(res)
fviz_cluster(res, dados.scale, geom = "point")
load("~/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalho Final/Exercicio8/ML_Trabalho8_02-DBSCAN.Rmd")
load("~/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalho Final/Exercicio8/ML_Trabalho8_02-DBSCAN.Rmd")
knitr::opts_chunk$set(
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
library(plotly)
library(stargazer)
if(!require(arules)) install.packages("arules")
if(!require(superml)) install.packages("superml")
library("arules")
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho1/data/papafrescaSimNao.csv", header = TRUE, sep = ";")
View(dados)
ncol(dados)
str(dados)
cor(x=dados, y=dados$Lapapaengorda, method = c("pearson", "kendall", "spearman"))
my_data <- dados
transacoes = as(my_data, "transactions");
summary (transacoes)
itemLabels (transacoes)
regras <- apriori(my_data,parameter = list(minlen=1, supp=0.01, conf=0.7),appearance = list(rhs=c("Lapapaengorda=Nao", "Lapapaengorda=Sim")))
inspect(regras)
knitr::opts_chunk$set(
echo = TRUE,
error = TRUE,
warning=FALSE,
message=FALSE
)
rm(list = ls())
library(plotly)
library(stargazer)
if(!require(arules)) install.packages("arules")
if(!require(superml)) install.packages("superml")
library("arules")
dados <- read.csv(file = "/Users/andrerodrigues/Google Drive/FIAP-MBA 8IA/006 - Modelos de IA e ML/Trabalhos/Trabalho1/data/papafrescaSimNao.csv", header = TRUE, sep = ";")
View(dados)
ncol(dados)
str(dados)
cor(x=dados, y=dados$Lapapaengorda, method = c("pearson", "kendall", "spearman"))
my_data <- dados
transacoes = as(my_data, "transactions");
summary (transacoes)
itemLabels (transacoes)
regras <- apriori(my_data,parameter = list(minlen=1, supp=0.01, conf=0.7),appearance = list(rhs=c("Lapapaengorda=Nao", "Lapapaengorda=Sim")))
inspect(regras)
regrasOrdenadas <- sort(regras, by="confidence")
inspect(regrasOrdenadas)
